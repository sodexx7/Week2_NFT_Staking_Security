Range:
src/NFTEnumerableContracts
src/SmartContractTrio

INFO:Detectors_1:

NFT721 (src/SmartContractTrio/NFT721.sol#23-103) inherits from a contract for which the name is reused.
	- Slither could not determine which contract has a duplicate name:
		-Ownable2Step (lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol#19-57)
		-Ownable (lib/openzeppelin-contracts/contracts/access/Ownable.sol#20-83)
		-ERC2981 (lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol#24-107)
		-ERC721 (lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol#19-466)
		-ERC165 (lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol#22-29)
		-IERC2981 (lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol#16-25)
		-IERC165 (lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol#15-25)
		-Context (lib/openzeppelin-contracts/contracts/utils/Context.sol#16-24)
	- Check if:
		- A inherited contract is missing from this list,
		- The contract are imported from the correct files.

NFTCollection (src/NFTEnumerableContracts/NFTCollection.sol#11-32) inherits from a contract for which the name is reused.
	- Slither could not determine which contract has a duplicate name:
		-ERC721Enumerable (lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Enumerable.sol#14-159)
		-ERC721 (lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol#19-466)
		-ERC165 (lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol#22-29)
		-IERC165 (lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol#15-25)
		-Context (lib/openzeppelin-contracts/contracts/utils/Context.sol#16-24)
	- Check if:
		- A inherited contract is missing from this list,
		- The contract are imported from the correct files.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#name-reused

Solution: perhaps the supportsInterface not corrctly use.
true positives



INFO:Detectors_2:
Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#101)
	- inverse = (3 * denominator) ^ 2 (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#116)
Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#101)
	- inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#120)
Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#101)
	- inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#121)
Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#101)
	- inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#122)
Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#101)
	- inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#123)
Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#101)
	- inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#124)
Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#101)
	- inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#125)
Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:
	- prod0 = prod0 / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#104)
	- result = prod0 * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#131)
StakingContract.calculateRewards(uint256) (src/SmartContractTrio/StakingContract.sol#160-163) performs a multiplication on the result of a division:
	- (block.timestamp - _stakeLastBeginTime[tokenId]) / 27 * REWARD_EACH_27_SECONDS (src/SmartContractTrio/StakingContract.sol#162)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

Solution, pass as this is the openzepplin lib


INFO:Detectors_3:
Ownable2Step.transferOwnership(address).newOwner (lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol#35) lacks a zero-check on :
		- _pendingOwner = newOwner (lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol#36)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Solution, sometimes the zero-address check is not necessary
false positives

INFO:Detectors_4:
Reentrancy in StakingContract.withdrawNFT(uint256) (src/SmartContractTrio/StakingContract.sol#91-110):
	External calls:
	- _nft1.safeTransferFrom(address(this),msg.sender,tokenId) (src/SmartContractTrio/StakingContract.sol#96)
	State variables written after the call(s):
	- delete _stakeLastBeginTime[tokenId] (src/SmartContractTrio/StakingContract.sol#103)
	- _unWithdrawnRewardsEachNFT[msg.sender][tokenId] = unwithdrawnCumuRewards (src/SmartContractTrio/StakingContract.sol#107)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Solution,
false positives, the tool can't make sense my logic. and my logic can't prevent from the re-entrance. because there are two delete.
	delete _originalOwner[tokenId];
	delete _stakeLastBeginTime[tokenId];


INFO:Detectors_5:
Reentrancy in StakingContract.withdrawNFT(uint256) (src/SmartContractTrio/StakingContract.sol#91-110):
	External calls:
	- _nft1.safeTransferFrom(address(this),msg.sender,tokenId) (src/SmartContractTrio/StakingContract.sol#96)
	Event emitted after the call(s):
	- UpdateUnwithdrawnRewards(msg.sender,tokenId,unwithdrawnCumuRewards) (src/SmartContractTrio/StakingContract.sol#108)
	- WithdrawNFT(msg.sender,tokenId) (src/SmartContractTrio/StakingContract.sol#98)

false positives,can't reentrance because update the states before_nft1.safeTransferFrom(address(this), msg.sender, tokenId);

Reentrancy in StakingContract.withdrawRewards(uint256) (src/SmartContractTrio/StakingContract.sol#124-144):
	External calls:
	- _rewardToken.mint(msg.sender,rewardTokenAmount + cumuReward) (src/SmartContractTrio/StakingContract.sol#135)
	Event emitted after the call(s):
	- WithdrawRewards(msg.sender,tokenId,rewardTokenAmount + cumuReward) (src/SmartContractTrio/StakingContract.sol#137)
Reentrancy in StakingContract.withdrawRewards(uint256) (src/SmartContractTrio/StakingContract.sol#124-144):
	External calls:
	- _rewardToken.mint(msg.sender,cumuReward) (src/SmartContractTrio/StakingContract.sol#141)
	Event emitted after the call(s):
	- WithdrawRewards(msg.sender,tokenId,cumuReward) (src/SmartContractTrio/StakingContract.sol#142)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

false positives


INFO:Detectors_6:
StakingContract.withdrawNFT(uint256) (src/SmartContractTrio/StakingContract.sol#91-110) uses timestamp for comparisons
	Dangerous comparisons:
	- rewardTokenAmount > 0 (src/SmartContractTrio/StakingContract.sol#105)
StakingContract.withdrawRewards(uint256) (src/SmartContractTrio/StakingContract.sol#124-144) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(rewardTokenAmount + cumuReward > 0,No reward for now) (src/SmartContractTrio/StakingContract.sol#134)
StakingContract.calculateRewards(uint256) (src/SmartContractTrio/StakingContract.sol#160-163) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_stakeLastBeginTime[tokenId] > 0,this nft not staking) (src/SmartContractTrio/StakingContract.sol#161)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp


INFO:Detectors_7:
StakingContract.withdrawNFT(uint256) (src/SmartContractTrio/StakingContract.sol#91-110) uses timestamp for comparisons
	Dangerous comparisons:
	- rewardTokenAmount > 0 (src/SmartContractTrio/StakingContract.sol#105)
StakingContract.withdrawRewards(uint256) (src/SmartContractTrio/StakingContract.sol#124-144) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(rewardTokenAmount + cumuReward > 0,No reward for now) (src/SmartContractTrio/StakingContract.sol#134)
StakingContract.calculateRewards(uint256) (src/SmartContractTrio/StakingContract.sol#160-163) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_stakeLastBeginTime[tokenId] > 0,this nft not staking) (src/SmartContractTrio/StakingContract.sol#161)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

false positives
It dosesn't matter, The rewards calculation based on the timestamp, the miner's effect is little for this calculation


INFO:Detectors_8:
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Enumerable.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Enumerable.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/access/Ownable.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol#4) allows old versions
Pragma version^0.8.1 (lib/openzeppelin-contracts/contracts/utils/Address.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/utils/Context.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/utils/Strings.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/utils/structs/BitMaps.sol#3) allows old versions
Pragma version0.8.17 (src/CTFs/Overmint1.sol#2) allows old versions
Pragma version0.8.17 (src/CTFs/Overmint2.sol#2) allows old versions
Pragma version0.8.17 (src/NFTEnumerableContracts/NFTCollection.sol#2) allows old versions
Pragma version0.8.17 (src/NFTEnumerableContracts/NFTGame.sol#2) allows old versions
Pragma version0.8.17 (src/SmartContractTrio/NFT721.sol#2) allows old versions
Pragma version0.8.17 (src/SmartContractTrio/RewardToken.sol#2) allows old versions
Pragma version0.8.17 (src/SmartContractTrio/StakingContract.sol#2) allows old versions
Pragma version0.8.17 (test/CTFs.Attacker.t/Overmint1Attacker.sol#2) allows old versions
Pragma version0.8.17 (test/CTFs.Attacker.t/Overmint2Attacker.sol#2) allows old versions
Pragma version0.8.17 (test/NFTEnumerableContracts.t/NFTCollection.t.sol#2) allows old versions
Pragma version0.8.17 (test/NFTEnumerableContracts.t/NFTGame.t.sol#2) allows old versions
Pragma version0.8.17 (test/SmartContractTrio.t/NFT721.t.sol#2) allows old versions
Pragma version^0.8.17 (test/SmartContractTrio.t/StakingContract.t.sol#2) allows old versions
solc-0.8.17 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

solution 
true positives, but it seems doesn't matter, as seems many projects use the older versions


INFO:Detectors_9:
NFTGame._nFTCollection (src/NFTEnumerableContracts/NFTGame.sol#7) should be immutable
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable

solution 
true positives

NFTCollection private _nFTCollection;  => NFTCollection immutable private _nFTCollection;